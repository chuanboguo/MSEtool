'<li><a href="profile_likelihood">Profile Likelihood</a></li>',
'<li><a href="retrospective.html">Retrospective</a></li>',
'</ul>',
'</div>',
'')
write(output, file = file_name, append = append, sep = "\n")
invisible()
}
write_navigation <- function(file_name, append) {
output <- c('<body>',
'<div id="navcontainer">',
'<ul id="navlist">',
'<li id="active"><a href="index.html" id="current">Home</a></li>',
'<li><a href="lifehistory.html">Life history</a></li>',
'<li><a href="data.html">Data</a></li>',
'<li><a href="assessment.html">Assessment</a></li>',
'<li><a href="profile_likelihood">Profile Likelihood</a></li>',
'<li><a href="retrospective.html">Retrospective</a></li>',
'</ul>',
'</div>',
'')
write(output, file = file_name, append = append, sep = "\n")
invisible()
}
write_navigation("index.html", append = TRUE)
?graphics.off
library(MSE)
zzz <- generate_report(zz)
View(generate_report_DD_TMB)
View(MSE:::generate_report_DD_TMB)
?file.path
x <- c("x", "y")
rbind(x, c("x", "y"))
?plogis
plogis
paste0("Number ", c(1:10))
zzz <- generate_report(zz)
library(MSE)
library(MSE)
zzz <- generate_report(zz)
library(MSE)
yft <- readxl::read_excel("C:/Users/qhuynh/Desktop/Biomass_dynamic/YFT.xlsx")
yft_Data <- new("Data")
yft_Data@Year <- yft$Year
yft_Data@Cat <- matrix(yft$Catch, nrow = 1)
yft_Data@CV_Ind <- 0.1
yft$Index[yft$Index < 0] <- NA
yft_Data@Ind <- matrix(yft$Index, nrow = 1)
zz <- SP(1, yft_Data, 100, Assessment = T)
zzz <- generate_report(zz)
library(MSE)
View9SP
View(SP)
View(DD_TMB)
View(DD_SS)
library(MSE)
load('C:/Users/qhuynh/Desktop/DD_rec_dev/red_snapper_simulation.RData')
## DD_TMB
Red_snapper2 <- Red_snapper
Red_snapper2@Cat[1, ] <- z$info$data$C_hist
Red_snapper2@Ind[1, ] <- z$info$data$C_hist/z$info$data$E_hist
zz <- DD_TMB(1, Red_snapper2, 100, Assessment = TRUE)
zzz <- generate_report(zz)
zz@SD
zzzz <- profile_likelihood(zz, UMSY = seq(0.01, 0.2, 0.01), MSY = seq(2, 4, 0.1))
ret <- retrospective(zz, nyr = 5)
## DD_SS
load('C:/Users/qhuynh/Desktop/DD_rec_dev/snapper_with_rec_devs.RData')
Red_snapper2 <- Red_snapper
set.seed(234)
Red_snapper2@Cat[1, ] <- res$Cpred * rlnorm(140, 0, 0.15)
Red_snapper2@Ind[1, ] <- Red_snapper2@Cat[1, ]/z$info$data$E_hist
zz <- DD_SS(1, Red_snapper2, 100, Assessment = TRUE)
zzz <- generate_report(zz)
zzzz <- profile_likelihood(zz, UMSY = seq(0.05, 0.15, 0.02), MSY = seq(2, 4, 0.5))
library(MSE)
yft <- readxl::read_excel("C:/Users/qhuynh/Desktop/Biomass_dynamic/YFT.xlsx")
yft_Data <- new("Data")
yft_Data@Year <- yft$Year
yft_Data@Cat <- matrix(yft$Catch, nrow = 1)
yft_Data@CV_Ind <- 0.1
yft$Index[yft$Index < 0] <- NA
yft_Data@Ind <- matrix(yft$Index, nrow = 1)
zz <- SP(1, yft_Data, 100, Assessment = T)
zzz <- generate_report(zz)
zzz$input_data
?qqplot
zzzz <- profile_likelihood(zz, UMSY = seq(0.3, 0.5, 0.05), MSY = seq(1.25, 1.75, 0.2) * 1e5)
ret <- retrospective(zz, nyr = 5)
library(MSE)
library(MSE)
yft <- readxl::read_excel("C:/Users/qhuynh/Desktop/Biomass_dynamic/YFT.xlsx")
yft_Data <- new("Data")
yft_Data@Year <- yft$Year
yft_Data@Cat <- matrix(yft$Catch, nrow = 1)
yft_Data@CV_Ind <- 0.1
yft$Index[yft$Index < 0] <- NA
yft_Data@Ind <- matrix(yft$Index, nrow = 1)
zz <- SP(1, yft_Data, 100, Assessment = T)
zzz <- generate_report(zz)
?signif
dat <- matrix(c(12345, .12345), ncol = 1)
dat
ifelse(dat[, 1] > 1000, signif(dat[, 1], 1), round(dat[, 1], 1))
ifelse(dat[, 1] > 1000, signif(dat[, 1], 3), round(dat[, 1], 1))
ifelse(dat[, 1] > 1000, signif(dat[, 1], 3), round(dat[, 1], 2))
dat <- matrix(c(12345.678, .12345), ncol = 1)
ifelse(dat[, 1] > 1000, round(dat[, 1], 3), signif(dat[, 1], 2))
library(MSE)
zzz <- generate_report(zz)
signif(0.340, 3)
zzzz <- profile_likelihood(zz, UMSY = seq(0.3, 0.5, 0.05), MSY = seq(1.25, 1.75, 0.2) * 1e5)
zzzz <- profile_likelihood(zz, UMSY = seq(0.05, 0.8, 0.05), MSY = seq(1.25, 1.75, 0.2) * 1e5)
zzzz <- profile_likelihood(zz, UMSY = seq(0.05, 0.8, 0.05), MSY = seq(1.25, 3.75, 0.2) * 1e5)
library(MSE)
zz <- SP(1, yft_Data, 100, Assessment = T)
zzzz <- profile_likelihood(zz, UMSY = seq(0.3, 0.5, 0.05), MSY = seq(1.25, 1.75, 0.2) * 1e5)
zzzz <- profile_likelihood(zz, UMSY = seq(0.05, 0.8, 0.05), MSY = seq(1.25, 3.75, 0.2) * 1e5)
zzzz <- profile_likelihood(zz, UMSY = seq(0.05, 0.8, 0.05), MSY = seq(1.25, 1.75, 0.2) * 1e5)
zzzz <- profile_likelihood(zz, UMSY = seq(0.3, 0.5, 0.025), MSY = seq(1.25, 1.75, 0.1) * 1e5)
library(MSE)
ret <- retrospective(zz, nyr = 5)
zzzz <- profile_likelihood(zz, UMSY = seq(0.3, 0.5, 0.05), MSY = seq(1.25, 1.75, 0.2) * 1e5)
yft <- readxl::read_excel("C:/Users/qhuynh/Desktop/Biomass_dynamic/BFT.xlsx")
yft_Data <- new("Data")
yft_Data@Year <- yft$Year
yft_Data@Cat <- matrix(yft$Catch, nrow = 1)
yft_Data@CV_Ind <- 0.1
yft$Index[yft$Index < 0] <- NA
yft_Data@Ind <- matrix(yft$Index, nrow = 1)
zz <- SP_SS(1, yft_Data, 100, Assessment = T)
library(MSE)
zzz <- generate_report(zz)
View(plot_lognormalvar)
library(MSE)
zzz <- generate_report(zz)
m
sd
logtransform
!logtransform
#f_y(y) = f_x(g-1(y)) * abs(d/dy[g-1(y)])
#where f is the pdf of distribution, g(y) = exp(X) is the transformation
#y is the lognormal variable, x is a normal variable
support.norm <- seq(min(m - 5*sd, na.rm = TRUE), max(m+5*sd, na.rm = TRUE),
length.out = 1e3)
support <- exp(support.norm)
dist <- matrix(NA, nrow = length(support), ncol = length(m))
for(i in 1:ncurve) dist[, i] <- dnorm(support.norm, m[i], sd[i])/abs(support)
dist
plot(support.norm)
plot(support)
support
range(upport)
dist.max <- max(dist, na.rm = TRUE)
dist.max
is.infinite(dist.max)
m
sd
support.norm
exp(support.norm)
dist.max <- max(dist, na.rm = TRUE)
if(is.infinite(dist.max)) dist.max <- 1e9
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
support <- support[ind.tails]
dist <- as.matrix(dist[ind.tails, ])
xlim_truncated <- range(pretty(support))
plot(support, dist[, 1], typ = 'l', xlab = label, xlim = xlim_truncated,
ylab = 'Probability density function',
ylim = c(0, 1.1 * max(dist, na.rm = TRUE)), col = color[1])
ind.tails
support
dist
range
?range
xlim_truncated <- range(pretty(support), finite = TRUE)
plot(support, dist[, 1], typ = 'l', xlab = label, xlim = xlim_truncated,
ylab = 'Probability density function',
ylim = c(0, 1.1 * max(dist, na.rm = TRUE)), col = color[1])
#f_y(y) = f_x(g-1(y)) * abs(d/dy[g-1(y)])
#where f is the pdf of distribution, g(y) = exp(X) is the transformation
#y is the lognormal variable, x is a normal variable
support.norm <- seq(min(m - 5*sd, na.rm = TRUE), max(m+5*sd, na.rm = TRUE),
length.out = 1e3)
fx <- dnorm(support.norm, m[i], sd[i])
fx
plot(support.norm, fx)
m
sd
i
support
support <- exp(support.norm)
plot(support)
sd
m
suppport.norm
support.norm
plot(support.norm, fx)
dist <- matrix(NA, nrow = length(support), ncol = length(m))
for(i in 1:ncurve) dist[, i] <- dnorm(support.norm, m[i], sd[i])/abs(support)
dist.max <- max(dist, na.rm = TRUE)
dist.max
plot(dist)
plot(support, dist)
support
dist
plot(support, dist[,1])
dist.max <- max(dist, na.rm = TRUE)
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
support <- support[ind.tails]
dist <- as.matrix(dist[ind.tails, ])
xlim_truncated <- range(pretty(support), finite = TRUE)
xlim_truncated
if(is.infinite(dist.max)) dist.max <- 1e9
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
support <- support[ind.tails]
dist <- as.matrix(dist[ind.tails, ])
xlim_truncated <- range(pretty(support), finite = TRUE)
plot(support, dist[, 1], typ = 'l', xlab = label, xlim = xlim_truncated,
ylab = 'Probability density function',
ylim = c(0, 1.1 * max(dist, na.rm = TRUE)), col = color[1])
?max
plot(support, dist[, 1], typ = 'l', xlab = label, xlim = xlim_truncated,
ylab = 'Probability density function')
xlim_truncated
plot(support, dist[, 1])
#f_y(y) = f_x(g-1(y)) * abs(d/dy[g-1(y)])
#where f is the pdf of distribution, g(y) = exp(X) is the transformation
#y is the lognormal variable, x is a normal variable
support.norm <- seq(min(m - 5*sd, na.rm = TRUE), max(m+5*sd, na.rm = TRUE),
length.out = 1e3)
support <- exp(support.norm)
dist <- matrix(NA, nrow = length(support), ncol = length(m))
for(i in 1:ncurve) dist[, i] <- dnorm(support.norm, m[i], sd[i])/abs(support)
dist.max <- max(dist, na.rm = TRUE)
if(is.infinite(dist.max)) dist.max <- 1e9
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
support <- support[ind.tails]
dist <- as.matrix(dist[ind.tails, ])
xlim_truncated <- range(pretty(support), finite = TRUE)
plot(support, dist[, 1])
dist.max <- max(dist, na.rm = TRUE)
#if(is.infinite(dist.max)) dist.max <- 1e9
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
support <- support[ind.tails]
dist <- as.matrix(dist[ind.tails, ])
xlim_truncated <- range(pretty(support), finite = TRUE)
plot(support, dist[, 1])
plot(support)
range(support)
plot(dist[, 1])
range(dist[, 1])
dist[, 1]
#f_y(y) = f_x(g-1(y)) * abs(d/dy[g-1(y)])
#where f is the pdf of distribution, g(y) = exp(X) is the transformation
#y is the lognormal variable, x is a normal variable
support.norm <- seq(min(m - 5*sd, na.rm = TRUE), max(m+5*sd, na.rm = TRUE),
length.out = 1e3)
support <- exp(support.norm)
dist <- matrix(NA, nrow = length(support), ncol = length(m))
for(i in 1:ncurve) dist[, i] <- dnorm(support.norm, m[i], sd[i])/abs(support)
dist.max <- max(dist, na.rm = TRUE)
dist.max
plot(dist)
dist
dist[, 1]
#if(is.infinite(dist.max)) dist.max <- 1e9
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
#if(is.infinite(dist.max)) dist.max <- 1e9
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
dim(tails)
tails
dist
0.1 * Inf
Inf < 0.1 * Inf
if(is.infinite(dist.max)) dist.max <- 1e9
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails
dist
dist.max <- max(dist, na.rm = TRUE)
if(is.infinite(dist.max)) dist.max <- 1e9
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
ind.tails
support <- support[ind.tails]
dist <- as.matrix(dist[ind.tails, ])
xlim_truncated <- range(pretty(support), finite = TRUE)
xlim_truncated
support
plot(support)
dist[, 1]
?range
dist <- matrix(NA, nrow = length(support), ncol = length(m))
for(i in 1:ncurve) dist[, i] <- dnorm(support.norm, m[i], sd[i])/abs(support)
function(m, sd, label = NULL, logtransform = FALSE, color = "black") {
# plots life history parameters: Linf, K, t0, M, FMSY_M
ncurve <- length(m)
browser()
if(!logtransform) {
true.m <- m
if(all(m) < 0) m <- -1 * m # special case needed when t0 < 0
mu <- DLMtool:::mconv(m, sd)
sdlog <- sdconv(m, sd)
support <- seq(0.001, max(m + 5*sdlog), length.out = 1e3)
dist <- matrix(NA, nrow = length(support), ncol = length)
for(i in 1:ncurve) dist[, i] <- dlnorm(support, mu[i], sdlog[i])
dist.max <- max(dist, na.rm = TRUE)
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
support <- support[ind.tails]
dist <- as.matrix(dist[ind.tails, ])
if(all(true.m) < 0) {
support <- -1 * support
xlim_truncated <- range(pretty(support))
plot(support, dist[, 1], typ = 'l', xlab = label,
ylab = 'Probability density function', xlim = xlim_truncated,
ylim = c(0, 1.1 * max(dist, na.rm = TRUE)), color = color[1])
if(ncurve > 1) {
for(i in 2:ncurve) lines(support, dist[, i], color = color[i])
}
}
if(all(true.m) > 0) {
xlim_truncated <- range(pretty(support))
plot(support, dist[, 1], typ = 'l', xlab = label,
ylab = 'Probability density function', xlim = xlim_truncated,
ylim = c(0, 1.1 * max(dist, na.rm = TRUE)), color = color[1])
if(ncurve > 1) {
for(i in 2:ncurve) lines(support, dist[, i], color = color[i])
}
}
abline(h = 0, col = 'grey')
abline(v = true.m, lty = 2, col = color.vec)
}
if(logtransform) {
#f_y(y) = f_x(g-1(y)) * abs(d/dy[g-1(y)])
#where f is the pdf of distribution, g(y) = exp(X) is the transformation
#y is the lognormal variable, x is a normal variable
support.norm <- seq(min(m - 5*sd, na.rm = TRUE), max(m+5*sd, na.rm = TRUE),
length.out = 1e3)
support <- exp(support.norm)
dist <- matrix(NA, nrow = length(support), ncol = length(m))
for(i in 1:ncurve) dist[, i] <- dnorm(support.norm, m[i], sd[i])/abs(support)
dist.max <- max(dist, na.rm = TRUE)
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
support <- support[ind.tails]
dist <- as.matrix(dist[ind.tails, ])
xlim_truncated <- range(pretty(support))
plot(support, dist[, 1], typ = 'l', xlab = label, xlim = xlim_truncated,
ylab = 'Probability density function',
ylim = c(0, 1.1 * max(dist, na.rm = TRUE)), col = color[1])
if(ncurve > 1) {
for(i in 2:ncurve) lines(support, dist[, i], col = color[i])
}
abline(h = 0, col = 'grey')
abline(v = exp(m), lty = 2, col = color)
}
invisible()
}
dist <- matrix(NA, nrow = length(support), ncol = length(m))
for(i in 1:ncurve) dist[, i] <- dnorm(support.norm, m[i], sd[i])/abs(support)
#f_y(y) = f_x(g-1(y)) * abs(d/dy[g-1(y)])
#where f is the pdf of distribution, g(y) = exp(X) is the transformation
#y is the lognormal variable, x is a normal variable
support.norm <- seq(min(m - 5*sd, na.rm = TRUE), max(m+5*sd, na.rm = TRUE),
length.out = 1e3)
support <- exp(support.norm)
dist <- matrix(NA, nrow = length(support), ncol = length(m))
for(i in 1:ncurve) dist[, i] <- dnorm(support.norm, m[i], sd[i])/abs(support)
dist[is.infinite(dist)] <- NA
dist.max <- max(dist, na.rm = TRUE)
tails <- apply(dist, 1, function(x) all(x < 0.001 * dist.max))
tails <- which(!tails)
ind.tails <- c(tails[1]:tails[length(tails)])
support <- support[ind.tails]
dist <- as.matrix(dist[ind.tails, ])
xlim_truncated <- range(pretty(support), finite = TRUE, na.rm = TRUE)
plot(support, dist[, 1], typ = 'l', xlab = label, xlim = xlim_truncated,
ylab = 'Probability density function',
ylim = c(0, 1.1 * max(dist, na.rm = TRUE)), col = color[1])
library(MSE)
zzz <- generate_report(zz)
sdconv(1, .1)
View(SP_SS)
zz@report
library(MSE)
yft_Data@CV_Ind <- 0.2
zz <- SP_SS(1, yft_Data, 100, Assessment = T)
yft_Data@CV_Ind <- 0.15
yft$Index[yft$Index < 0] <- NA
yft_Data@Ind <- matrix(yft$Index, nrow = 1)
zz <- SP_SS(1, yft_Data, 100, Assessment = T)
yft_Data@CV_Ind <- 0.25
zz <- SP_SS(1, yft_Data, 100, Assessment = T)
yft_Data@CV_Ind <- 0.15
zz <- SP_SS(1, yft_Data, 100, Assessment = T)
zzz <- generate_report(zz)
library(MSE)
library(MSE)
zzz <- generate_report(zz)
library(MSE)
zzzz <- profile_likelihood(zz, UMSY = seq(0.3, 0.5, 0.05), MSY = seq(1.25, 1.75, 0.2) * 1e5)
zzzz <- profile_likelihood(zz, UMSY = seq(0.3, 0.5, 0.05), MSY = seq(1000, 3000, 250))
zzzz <- profile_likelihood(zz, UMSY = seq(0.001, 0.1, 0.01), MSY = seq(1000, 3000, 250))
UMSY
zzzz <- profile_likelihood(zz, UMSY = seq(0.001, 0.1, 0.01), MSY = seq(1000, 3000, 250))
UMSY
MSY
profile.grid <- expand.grid(UMSY = UMSY, MSY = MSY)
MLE <- as.numeric(Assessment@obj$env$last.par.best) # Max. likelihood est.
MLE
Assessment@obj$env$last.par.best
UMSY.MLE <- 1/(1 + exp(-MLE[1]))
MSY.MLE <- exp(MLE[2])
nll <- rep(NA, nrow(profile.grid))
UMSY.MLE
opt
Assessment@opt
Assessment@info$params
library(MSE)
zzzz <- profile_likelihood(zz, UMSY = seq(0.001, 0.1, 0.01), MSY = seq(1000, 3000, 250))
zz <- SP_SS(1, yft_Data, 100, Assessment = T)
zzzz <- profile_likelihood(zz, UMSY = seq(0.3, 0.5, 0.05), MSY = seq(1.25, 1.75, 0.2) * 1e5)
zz@MP
library(MSE)
zzzz <- profile_likelihood(zz, UMSY = seq(0.3, 0.5, 0.05), MSY = seq(1.25, 1.75, 0.2) * 1e5)
zzzz <- profile_likelihood(zz, UMSY = seq(0.001, 0.1, 0.01), MSY = seq(1000, 3000, 250))
zzzz <- profile_likelihood(zz, UMSY = seq(0.001, 0.7, 0.01), MSY = seq(1000, 6000, 500))
zz <- SP_SS(1, yft_Data, 100, Assessment = T, B1frac = .75)
zz <- SP(1, yft_Data, 100, Assessment = T, B1frac = .75)
zzz <- generate_report(zz)
zz <- SP_SS(1, yft_Data, 100, Assessment = T)
library(MSE)
ret <- retrospective(zz, nyr = 5)
Year <- info$Year
Year <- c(Year, max(Year) + 1)
Catch <- data$Catch
Index <- data$Index
params
params <- as.list(obj$env$last.par.best)
params
info
params <- info$params
params
summSD <- summary(SD)
summSD
summSD <- summSD[rownames(summSD) != "log_B_dev", ]
retro_est <- array(NA, dim = c(nyr+1, dim(summary(SD))))
retro_est <- array(NA, dim = c(nyr+1, dim(summSD)))
dim(retro_est)
dim(summSD)
nyr
map
data <- info$data
n_y <- data$n_y
Year <- info$Year
Year <- c(Year, max(Year) + 1)
Catch <- data$Catch
Index <- data$Index
params <- info$params
map <- obj$env$map
map
# Array dimension: Retroyr, Year, ts
# ts includes: Calendar Year, B, U, relU, relB, log_B_dev
retro_ts <- array(NA, dim = c(nyr+1, n_y + 1, 7))
summSD <- summary(SD)
summSD <- summSD[rownames(summSD) != "log_B_dev", ]
retro_est <- array(NA, dim = c(nyr+1, dim(summSD)))
Q
library(MSE)
ret <- retrospective(zz, nyr = 5)
library(MSE)
ret <- retrospective(zz, nyr = 5)
library(MSE)
load('C:/Users/qhuynh/Desktop/DD_rec_dev/red_snapper_simulation.RData')
## DD_SS
load('C:/Users/qhuynh/Desktop/DD_rec_dev/snapper_with_rec_devs.RData')
Red_snapper2 <- Red_snapper
set.seed(234)
Red_snapper2@Cat[1, ] <- res$Cpred * rlnorm(140, 0, 0.15)
Red_snapper2@Ind[1, ] <- Red_snapper2@Cat[1, ]/z$info$data$E_hist
zz <- DD_SS(1, Red_snapper2, 100, Assessment = TRUE)
library(TMB)
sd1 <- sdreport(zz@opt)
sd1 <- sdreport(zz@obj)
?sdreport
sd2 <- sdreport(zz@obj, bias.correct = T)
View(sd2)
View(summary(sd2))
summary(sd2)
sd2 <- sdreport(zz@obj, bias.correct = T, getJointPrecision = T)
summary(sd2)
runExample("simple", thisR = TRUE)          ## Random effect example
rep <- sdreport(obj)
rep2 <- sdreport(obj, bias.correct = T)
summary(rep)
summary(rep2)
