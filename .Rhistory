library(MSEtool)
library(DLMtool)
library(TMB)
nareas<-length(fracs)
if(length(prob)==1) data <- list(model = "grav",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==nareas) data <- list(model = "grav_Pbyarea",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==1)params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
if(length(prob)==nareas)params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
if(length(prob)==1)params.new<-list(log_visc=opt$par[1],log_grav=opt$par[2:nareas])
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nreas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
obj<-obj.new
obj.new$report()
obj.new$report()$mov
prob=c(0.5,0.8,0.9,0.95)
nareas<-length(fracs)
if(length(prob)==1) data <- list(model = "grav",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==nareas) data <- list(model = "grav_Pbyarea",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==1)params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
if(length(prob)==nareas)params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
if(length(prob)==1)params.new<-list(log_visc=opt$par[1],log_grav=opt$par[2:nareas])
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nreas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nareas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
dist_s<-t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas))
dist_s<-t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas))
OM<-testOM
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
nareas<-length(dist)
nsim<-OM@nsim
dist=rep(0.1,0.2,0.3,0.4)
prob=0.5
distE=0.1,
distE=0.1
probE=0.1
prob2=NA
dist_s<-t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas))
nareas*nsim
logit(dist)
dist
dist=rep(0.1,0.2,0.3,0.4)
dist_s<-t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas))
dist
dist=c(0.1,0.2,0.3,0.4)
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
nareas<-length(dist)
nsim<-OM@nsim
dist_s<-t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas))
dist_s
class(prob_s)
prob_s<-rnorm(nsim,logit(prob),probE)
prob_s
class(prob_s)
prob_s<-t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas))
class(prob_s)
dist_s[i,]
i<-1
dist_s[i,]
dist_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas)))
if(length(prob)==1){
prob_s<-ilogit(rnorm(nsim,logit(prob),probE))
}else if(length(prob)==length(dist)&is.na(prob2)){
prob_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas)))
}else if(length(prob)==length(dist)&length(prob)==length(prob2)){
prob_s<-t(matrix(runif(nareas*nsim,prob,prob2),nrow=nareas))
}
prob_s
dist_s[i,]
dist_s
apply(dists_s,1,sum)
apply(dist_s,1,sum)
logit<-function(p)log(p/(1-p))
ilogit<-funciton(x)exp(x)/(1+exp(x))
ilogitm<-function(x)exp(x)/apply(exp(x),1,sum)
nareas<-length(dist)
nsim<-OM@nsim
maxage<-OM@maxage
mov<-array(NA,c(nsim,maxage,nareas,nareas))
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas)))
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
ilogitm<-function(x)exp(x)/apply(exp(x),1,sum)
nareas<-length(dist)
nsim<-OM@nsim
maxage<-OM@maxage
mov<-array(NA,c(nsim,maxage,nareas,nareas))
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas)))
apply(dist_s,1,sum)
prob_s<-ilogit(rnorm(nsim,logit(prob),probE))
prob_s
i
if(class(prob_s)=='matrix'){
data <- list(model = "grav_Pbyarea",fracs = dist_s[i,], prob = prob_s[i,], nareas = nareas)
params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
}else{
data <- list(model = "grav",fracs = dist_s[i,], prob = prob_s[i], nareas = nareas)
params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
}
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
opt
validate(opt)
validateTMB(opt)
validateTMB<-function(obj){
log_grav<-obj$report()$log_grav
log_visc<-obj$report()$log_visc
nareas<-length(log_grav)+1
grav<-array(0,c(nareas,nareas))
grav[,2:nareas]<-rep(log_grav,each=nareas)
grav[cbind(1:nareas,1:nareas)]<-grav[cbind(1:nareas,1:nareas)]+log_visc
mov<-exp(grav)/apply(exp(grav),1,sum)
idist<-rep(1/nareas,nareas)
for(i in 1:50)idist<-apply(idist*mov,2,sum)
print(obj$report()$idist)
print(idist)
print(obj$report()$fracs)
print(obj$report()$mov)
print(mov)
}
validateTMB(opt)
prob_s<-ilogit(matrix(rnorm(nsim,logit(prob),probE),nrow=nsim))
prob_s
mov<-makemov(fracs=dist_s[i,],prob=prob_s[i,])
makemov<-function(fracs=c(0.1,0.2,0.3,0.4),prob=c(0.5,0.8,0.9,0.95)){
nareas<-length(fracs)
if(length(prob)==1) data <- list(model = "grav",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==nareas) data <- list(model = "grav_Pbyarea",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==1)params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
if(length(prob)==nareas)params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
if(length(prob)==1)params.new<-list(log_visc=opt$par[1],log_grav=opt$par[2:nareas])
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nareas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
}
makemov
mov<-makemov(fracs=dist_s[i,],prob=prob_s[i,])
mov
for(i in 1:nsim){
mov<-makemov(fracs=dist_s[i,],prob=prob_s[i,])
mov[i,,,]<-mov
} # nsim
mov<-makemov(fracs=dist_s[i,],prob=prob_s[i,])
mov[i,,,]<-rep(mov,each=maxage)
dim(mov)
maxage
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
ilogitm<-function(x)exp(x)/apply(exp(x),1,sum)
nareas<-length(dist)
nsim<-OM@nsim
maxage<-OM@maxage
mov<-array(NA,c(nsim,maxage,nareas,nareas))
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas)))
if(length(prob)==1){
prob_s<-ilogit(matrix(rnorm(nsim,logit(prob),probE),nrow=nsim))
}else if(length(prob)==length(dist)&is.na(prob2)){
prob_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas)))
}else if(length(prob)==length(dist)&length(prob)==length(prob2)){
prob_s<-t(matrix(runif(nareas*nsim,prob,prob2),nrow=nareas))
}else{
stop("Error: either prob wasn't of length 1, or prob wasn't of length dist or prob 2 wasn't the same length as prob and dist.
You have three options:
(1) provide one value for prob which represents mean probability of staying across all areas sampled for each simulation with probE logit error
(2) provide nareas values of prob which represent probability of staying across all areas sampled for each simulation with probE logit error
(3) provide nareas values of prob and prob2 which are the upper and lower bounds for sampling uniform probability of staying for each area")
}
for(i in 1:nsim){
movt<-makemov(fracs=dist_s[i,],prob=prob_s[i,])
mov[i,,,]<-rep(movt,each=maxage)
} # nsim
mov[1,,,]
mov[1,1,,]
mov[1,2,,]
mov[2,2,,]
mov[2,10,,]
simmov<-function(OM,dist=c(0.1,0.2,0.3,0.4),prob=0.5,distE=0.1,probE=0.1,prob2=NA){
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
ilogitm<-function(x)exp(x)/apply(exp(x),1,sum)
nareas<-length(dist)
nsim<-OM@nsim
maxage<-OM@maxage
mov<-array(NA,c(nsim,maxage,nareas,nareas))
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas)))
if(length(prob)==1){
prob_s<-ilogit(matrix(rnorm(nsim,logit(prob),probE),nrow=nsim))
}else if(length(prob)==length(dist)&is.na(prob2)){
prob_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas)))
}else if(length(prob)==length(dist)&length(prob)==length(prob2)){
prob_s<-t(matrix(runif(nareas*nsim,prob,prob2),nrow=nareas))
}else{
stop("Error: either prob wasn't of length 1, or prob wasn't of length dist or prob 2 wasn't the same length as prob and dist.
You have three options:
(1) provide one value for prob which represents mean probability of staying across all areas sampled for each simulation with probE logit error
(2) provide nareas values of prob which represent probability of staying across all areas sampled for each simulation with probE logit error
(3) provide nareas values of prob and prob2 which are the upper and lower bounds for sampling uniform probability of staying for each area")
}
for(i in 1:nsim){
movt<-makemov(fracs=dist_s[i,],prob=prob_s[i,])
mov[i,,,]<-rep(movt,each=maxage)
} # nsim
OM@cpars$mov<-mov
OM
}
simmov<-function(OM,dist=c(0.1,0.2,0.3,0.4),prob=0.5,distE=0.1,probE=0.1,prob2=NA){
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
ilogitm<-function(x)exp(x)/apply(exp(x),1,sum)
nareas<-length(dist)
nsim<-OM@nsim
maxage<-OM@maxage
mov<-array(NA,c(nsim,maxage,nareas,nareas))
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas)))
if(length(prob)==1){
prob_s<-ilogit(matrix(rnorm(nsim,logit(prob),probE),nrow=nsim))
}else if(length(prob)==length(dist)&is.na(prob2)){
prob_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas)))
}else if(length(prob)==length(dist)&length(prob)==length(prob2)){
prob_s<-t(matrix(runif(nareas*nsim,prob,prob2),nrow=nareas))
}else{
stop("Error: either prob wasn't of length 1, or prob wasn't of length dist or prob 2 wasn't the same length as prob and dist.
You have three options:
(1) provide one value for prob which represents mean probability of staying across all areas sampled for each simulation with probE logit error
(2) provide nareas values of prob which represent probability of staying across all areas sampled for each simulation with probE logit error
(3) provide nareas values of prob and prob2 which are the upper and lower bounds for sampling uniform probability of staying for each area")
}
for(i in 1:nsim){
movt<-makemov(fracs=dist_s[i,],prob=prob_s[i,])
mov[i,,,]<-rep(movt,each=maxage)
} # nsim
OM@cpars$mov<-mov
OM
}
myOM<-simmov(testOM, dist=c(0.1,0.8,0.05,0.05),prob=c(0.6,0.5,0.7,0.85))
myOM@cpars$mov[1,1,,]
myOM@cpars$mov[1,2,,]
#'
#' @description A function for calculating a movement matrix from user specified unfished stock biomass fraction in each area
#' @param fracs A vector nareas long of fractions of unfished stock biomass in each area
#' @param prob A vector of the probability of individuals staying in each area or a single value for the mean probability of staying among all areas
#' @author T. Carruthers
#' @export makemov
#' @import TMB
#' @importFrom stats nlminb
#' @importFrom mvtnorm rmvnorm
#' @useDynLib MSEtool
makemov<-function(fracs=c(0.1,0.2,0.3,0.4),prob=c(0.5,0.8,0.9,0.95)){
nareas<-length(fracs)
if(length(prob)==1) data <- list(model = "grav",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==nareas) data <- list(model = "grav_Pbyarea",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==1)params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
if(length(prob)==nareas)params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
if(length(prob)==1)params.new<-list(log_visc=opt$par[1],log_grav=opt$par[2:nareas])
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nareas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
}
prob=c(0.6,0.5,0.7,0.85)
dist=c(0.1,0.8,0.05,0.05)
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
ilogitm<-function(x)exp(x)/apply(exp(x),1,sum)
nareas<-length(dist)
nsim<-OM@nsim
maxage<-OM@maxage
mov<-array(NA,c(nsim,maxage,nareas,nareas))
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas)))
dist_s
dist
logit(dist)
rnorm(nareas*nsim,logit(dist),distE),nrow=nareas)
t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas))
ilogitm(t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas)))
ilogit(logit(dist))
logit(dist)
t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas))
temp<-t(matrix(rnorm(nareas*nsim,logit(dist),distE),nrow=nareas))
apply(temp,2,mean)
logit(dist)
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,log(dist),distE),nrow=nareas)))
dist_s
prob
prob_s<-ilogit(matrix(rnorm(nsim,logit(prob),probE),nrow=nsim))
prob_s
prob_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas)))
prob_s
prob
apply(prob_s,2,mean)
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
ilogitm<-function(x)exp(x)/apply(exp(x),1,sum)
nareas<-length(dist)
nsim<-OM@nsim
maxage<-OM@maxage
mov<-array(NA,c(nsim,maxage,nareas,nareas))
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,log(dist),distE),nrow=nareas)))
if(length(prob)==1){
prob_s<-ilogit(matrix(rnorm(nsim,logit(prob),probE),nrow=nsim))
}else if(length(prob)==length(dist)&is.na(prob2)){
prob_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas)))
}else if(length(prob)==length(dist)&length(prob)==length(prob2)){
prob_s<-t(matrix(runif(nareas*nsim,prob,prob2),nrow=nareas))
}else{
stop("Error: either prob wasn't of length 1, or prob wasn't of length dist or prob 2 wasn't the same length as prob and dist.
You have three options:
(1) provide one value for prob which represents mean probability of staying across all areas sampled for each simulation with probE logit error
(2) provide nareas values of prob which represent probability of staying across all areas sampled for each simulation with probE logit error
(3) provide nareas values of prob and prob2 which are the upper and lower bounds for sampling uniform probability of staying for each area")
}
for(i in 1:nsim){
movt<-makemov(fracs=dist_s[i,],prob=prob_s[i,])
mov[i,,,]<-rep(movt,each=maxage)
} # nsim
mov[1,1,,]
prob
i
i<-1
prob_s[1,]
length(prob)
length(prob)==length(dist)&is.na(prob2)
prob_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas)))
prob_s[1,]
i
fracs=dist_s[i,]
prob=prob_s[i,]
nareas<-length(fracs)
if(length(prob)==1) data <- list(model = "grav",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==nareas) data <- list(model = "grav_Pbyarea",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==1)params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
if(length(prob)==nareas)params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
params
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
if(length(prob)==1)params.new<-list(log_visc=opt$par[1],log_grav=opt$par[2:nareas])
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nareas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
validateTMB(obj.new)
fracs
prob
library(MSEtool)
fracs=c(0.1,0.2,0.3,0.4)
prob=c(0.5,0.8,0.9,0.95)
nareas<-length(fracs)
if(length(prob)==1) data <- list(model = "grav",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==nareas) data <- list(model = "grav_Pbyarea",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==1)params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
if(length(prob)==nareas)params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
if(length(prob)==1)params.new<-list(log_visc=opt$par[1],log_grav=opt$par[2:nareas])
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nareas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
validateTMB(obj.new)
library(MSEtool)
library(DLMtool)
library(TMB)
nareas<-length(fracs)
if(length(prob)==1) data <- list(model = "grav",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==nareas) data <- list(model = "grav_Pbyarea",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==1)params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
if(length(prob)==nareas)params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
if(length(prob)==1)params.new<-list(log_visc=opt$par[1],log_grav=opt$par[2:nareas])
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nareas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
validateTMB(obj.new)
validateTMB<-function(obj){
log_grav<-obj$report()$log_grav
log_visc<-obj$report()$log_visc
nareas<-length(log_grav)+1
grav<-array(0,c(nareas,nareas))
grav[,2:nareas]<-rep(log_grav,each=nareas)
grav[cbind(1:nareas,1:nareas)]<-grav[cbind(1:nareas,1:nareas)]+log_visc
mov<-exp(grav)/apply(exp(grav),1,sum)
idist<-rep(1/nareas,nareas)
for(i in 1:50)idist<-apply(idist*mov,2,sum)
print(obj$report()$idist)
print(idist)
print(obj$report()$fracs)
print(obj$report()$mov)
print(mov)
}
nareas<-length(fracs)
if(length(prob)==1) data <- list(model = "grav",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==nareas) data <- list(model = "grav_Pbyarea",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==1)params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
if(length(prob)==nareas)params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
if(length(prob)==1)params.new<-list(log_visc=opt$par[1],log_grav=opt$par[2:nareas])
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nareas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
validateTMB(obj.new)
dist=c(0.1,0.2,0.3,0.4)
distE=0.1
probE=0.1
prob2=NA
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
ilogitm<-function(x)exp(x)/apply(exp(x),1,sum)
nareas<-length(dist)
nsim<-OM@nsim
maxage<-OM@maxage
mov<-array(NA,c(nsim,maxage,nareas,nareas))
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,log(dist),distE),nrow=nareas)))
if(length(prob)==1){
prob_s<-ilogit(matrix(rnorm(nsim,logit(prob),probE),nrow=nsim))
}else if(length(prob)==length(dist)&is.na(prob2)){
prob_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas)))
}else if(length(prob)==length(dist)&length(prob)==length(prob2)){
prob_s<-t(matrix(runif(nareas*nsim,prob,prob2),nrow=nareas))
}else{
stop("Error: either prob wasn't of length 1, or prob wasn't of length dist or prob 2 wasn't the same length as prob and dist.
You have three options:
(1) provide one value for prob which represents mean probability of staying across all areas sampled for each simulation with probE logit error
(2) provide nareas values of prob which represent probability of staying across all areas sampled for each simulation with probE logit error
(3) provide nareas values of prob and prob2 which are the upper and lower bounds for sampling uniform probability of staying for each area")
}
OM<-testOM
logit<-function(p)log(p/(1-p))
ilogit<-function(x)exp(x)/(1+exp(x))
ilogitm<-function(x)exp(x)/apply(exp(x),1,sum)
nareas<-length(dist)
nsim<-OM@nsim
maxage<-OM@maxage
mov<-array(NA,c(nsim,maxage,nareas,nareas))
dist_s<-ilogitm(t(matrix(rnorm(nareas*nsim,log(dist),distE),nrow=nareas)))
if(length(prob)==1){
prob_s<-ilogit(matrix(rnorm(nsim,logit(prob),probE),nrow=nsim))
}else if(length(prob)==length(dist)&is.na(prob2)){
prob_s<-ilogit(t(matrix(rnorm(nareas*nsim,logit(prob),probE),nrow=nareas)))
}else if(length(prob)==length(dist)&length(prob)==length(prob2)){
prob_s<-t(matrix(runif(nareas*nsim,prob,prob2),nrow=nareas))
}else{
stop("Error: either prob wasn't of length 1, or prob wasn't of length dist or prob 2 wasn't the same length as prob and dist.
You have three options:
(1) provide one value for prob which represents mean probability of staying across all areas sampled for each simulation with probE logit error
(2) provide nareas values of prob which represent probability of staying across all areas sampled for each simulation with probE logit error
(3) provide nareas values of prob and prob2 which are the upper and lower bounds for sampling uniform probability of staying for each area")
}
dist_s
prob_s
for(i in 1:nsim){
movt<-makemov(fracs=dist_s[i,],prob=prob_s[i,])
mov[i,,,]<-rep(movt,each=maxage)
} # nsim
OM@cpars$mov<-mov
makemov<-function(fracs=c(0.1,0.2,0.3,0.4),prob=c(0.5,0.8,0.9,0.95)){
nareas<-length(fracs)
if(length(prob)==1) data <- list(model = "grav",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==nareas) data <- list(model = "grav_Pbyarea",fracs = fracs, prob = prob, nareas = nareas)
if(length(prob)==1)params <- list(log_visc = 0,log_grav = rep(0,nareas-1))
if(length(prob)==nareas)params <- list(log_visc = rep(0,nareas),log_grav = rep(0,nareas-1))
info <- list(data = data, params = params)
obj <- MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)
if(length(prob)==1)params.new<-list(log_visc=opt$par[1],log_grav=opt$par[2:nareas])
if(length(prob)==nareas)params.new<-list(log_visc=opt$par[1:nareas],log_grav=opt$par[nareas+(1:(nareas-1))])
info <- list(data = data, params = params.new)
obj.new<-MakeADFun(data = info$data, parameters = info$params, DLL = "MSEtool", silent = TRUE)
obj.new$report()$mov
validateTMB(obj.new)
}
devtools::document()
devtools::document()
devtools::document()
library(MSEtool)
library(MSEtool)
testOM
library(MSEtool)
?simmov
devtools::document()
library(MSEtool)
library(MSEtool)
?simmov
