{
    "data" : [
        "\nR version 3.4.3 (2017-11-30) -- \"Kite-Eating Tree\"\nCopyright (C) 2017 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "install.packages(\"TMB\")",
        "Installing package into ‘C:/Users/tcar_/Documents/R/win-library/3.4’\n(as ‘lib’ is unspecified)\n",
        "also installing the dependency ‘RcppEigen’\n\n",
        "trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/RcppEigen_0.3.3.4.0.zip'\n",
        "Content type 'application/zip'",
        " length 2663532 bytes (2.5 MB)\n",
        "downloaded 2.5 MB\n\n",
        "trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/TMB_1.7.12.zip'\n",
        "Content type 'application/zip'",
        " length 1977049 bytes (1.9 MB)\n",
        "downloaded 1.9 MB\n\n",
        "package ‘RcppEigen’ successfully unpacked and MD5 sums checked\npackage ‘TMB’ successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\tcar_\\AppData\\Local\\Temp\\Rtmpiebgnj\\downloaded_packages\n\nRestarting R session...\n\n",
        "> ",
        "library(MSEtool)",
        "Loading required package: DLMtool\n",
        "Loading required package: snowfall\n",
        "Loading required package: snow\n",
        "\nAttaching package: ‘MSEtool’\n\n",
        "The following objects are masked from ‘package:DLMtool’:\n\n    fetch.file.names, getBH, getGpars, iSCAM2Data, iSCAMcomps, iSCAMinds, LinInterp, load.iscam.files, negcorlogspace,\n    optBH, read.control.file, read.data.file, read.mcmc, read.par.file, read.projection.file, read.report.file, SRopt,\n    SS2Data\n\n",
        "> ",
        "fracs=rep(0.2,5)",
        "> ",
        "muprob=0.9",
        "> ",
        "efracs=0.1",
        "> ",
        "evisc=rep(0.1,5)",
        "> ",
        "OM=testOM",
        "> ",
        "nareas<-length(fracs)",
        "> ",
        "  data <- list(model = \"grav\",fracs = fracs, muprob = muprob, nareas = nareas)",
        "> ",
        "",
        "> ",
        "  params <- list(logit_frac = rep(0,nareas-1), log_visc = 0)",
        "> ",
        "  info <- list(data = data, params = params)",
        "> ",
        "obj <- MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\", silent = TRUE)",
        "Error in MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\",  : \n  could not find function \"MakeADFun\"\n",
        "> ",
        "library(DLMtool)",
        "> ",
        "obj <- MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\", silent = TRUE)",
        "Error in MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\",  : \n  could not find function \"MakeADFun\"\n",
        "> ",
        "library(TMB)",
        "> ",
        "obj <- MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\", silent = TRUE)",
        "Error in MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\",  : \n  Error when reading the variable: 'log_grav'. Please check data and parameters.\n",
        "In addition: ",
        "Warning message:\n",
        "In MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\",  :",
        "\n ",
        " Expected object. Got NULL.\n",
        "> ",
        "nareas<-length(fracs)",
        "> ",
        "  data <- list(model = \"grav\",fracs = fracs, muprob = muprob, nareas = nareas)",
        "> ",
        "",
        "> ",
        "  params <- list(log_grav = rep(0,nareas-1), log_visc = 0)",
        "> ",
        "  info <- list(data = data, params = params)",
        "> ",
        "",
        "> ",
        "  obj <- MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\", silent = TRUE)",
        "> ",
        "opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)",
        "> ",
        "opt",
        "$par\nlog_grav log_grav log_grav log_grav log_visc \n       0        0        0        0        0 \n\n$objective\n[1] Inf\n\n$convergence\n[1] 0\n\n$iterations\n[1] 1\n\n$evaluations\nfunction gradient \n       1        1 \n\n$message\n[1] \"both X-convergence and relative convergence (5)\"\n\n",
        "> ",
        "obj",
        "$par\nlog_grav log_grav log_grav log_grav log_visc \n       0        0        0        0        0 \n\n$fn\nfunction (x = last.par, ...) \n{\n    if (tracepar) {\n        cat(\"par:\\n\")\n        print(x)\n    }\n    if (!validpar(x)) \n        return(NaN)\n    res <- f(x, order = 0)\n    if (!ADreport) {\n        if (is.finite(res) && res < value.best) {\n            last.par.best <<- x\n            value.best <<- res\n        }\n    }\n    res\n}\n<bytecode: 0x0000000020a3b6d8>\n<environment: 0x000000001f9c9a90>\n\n$gr\nfunction (x = last.par, ...) \n",
        "{\n    ans <- f(x, order = 1)\n    if (tracemgc) \n        cat(\"outer mgc: \", max(abs(ans)), \"\\n\")\n    ans\n}\n<bytecode: 0x00000000209418f8>\n<environment: 0x000000001f9c9a90>\n\n$he\nfunction (x = last.par, atomic = usingAtomics()) \n{\n    if (!atomic) \n        return(f(x, order = 2))\n    if (is.null(ADGrad)) \n        ADGrad <<- .Call(\"MakeADGradObject\", data, parameters, \n            reportenv, PACKAGE = DLL)\n    f(x, type = \"ADGrad\", order = 1)\n}\n<bytecode: 0x00000000207bd008>\n<environment: 0x000000001f9c9a90>\n\n$hessian\n",
        "[1] FALSE\n\n$method\n[1] \"BFGS\"\n\n$retape\nfunction () \n{\n    if (atomic) {\n        Fun <<- .Call(\"MakeDoubleFunObject\", data, parameters, \n            reportenv, PACKAGE = DLL)\n        .Call(\"EvalDoubleFunObject\", Fun$ptr, unlist(parameters), \n            control = list(do_simulate = as.integer(0)), PACKAGE = DLL)\n    }\n    if (is.character(profile)) {\n        random <<- c(random, profile)\n    }\n    if (is.character(random)) {\n        if (!regexp) {\n            if (!all(random %in% names(parameters))) {\n                cat(\"Some 'random' effect names does not match 'parameter' list:\\n\")\n",
        "                print(setdiff(random, names(parameters)))\n                cat(\"(Note that regular expression match is disabled by default)\\n\")\n                stop()\n            }\n            if (any(duplicated(random))) {\n                cat(\"Duplicates in 'random' - will be removed\\n\")\n                random <<- unique(random)\n            }\n            tmp <- lapply(parameters, function(x) x * 0)\n            tmp[random] <- lapply(tmp[random], function(x) x * \n                0 + 1)\n            random <<- which(as.logical(unlist(tmp)))\n",
        "            if (length(random) == 0) \n                random <<- NULL\n        }\n        if (regexp) {\n            random <<- grepRandomParameters(parameters, random)\n            if (length(random) == 0) {\n                cat(\"Selected random effects did not match any model parameters.\\n\")\n                random <<- NULL\n            }\n        }\n        if (is.character(profile)) {\n            tmp <- lapply(parameters, function(x) x * 0)\n            tmp[profile] <- lapply(tmp[profile], function(x) x * \n                0 + 1)\n",
        "            profile <<- match(which(as.logical(unlist(tmp))), \n                random)\n            if (length(profile) == 0) \n                random <<- NULL\n            if (any(duplicated(profile))) \n                stop(\"Profile parameter vector not unique.\")\n            tmp <- rep(0L, length(random))\n            tmp[profile] <- 1L\n            profile <<- tmp\n        }\n        par <<- unlist(parameters)\n    }\n    if (\"ADFun\" %in% type) {\n        ADFun <<- .Call(\"MakeADFunObject\", data, parameters, \n            reportenv, control = list(report = as.integer(ADreport)), \n",
        "            PACKAGE = DLL)\n        par <<- attr(ADFun$ptr, \"par\")\n        last.par <<- par\n        last.par1 <<- par\n        last.par2 <<- par\n        last.par.best <<- par\n    }\n    if (\"Fun\" %in% type) \n        Fun <<- .Call(\"MakeDoubleFunObject\", data, parameters, \n            reportenv, PACKAGE = DLL)\n    if (\"ADGrad\" %in% type) \n        ADGrad <<- .Call(\"MakeADGradObject\", data, parameters, \n            reportenv, PACKAGE = DLL)\n    env$skipFixedEffects <- !is.null(ADGrad)\n    delayedAssign(\"spHess\", sparseHessianFun(env, skipFixedEffects = skipFixedEffects), \n",
        "        assign.env = env)\n}\n<bytecode: 0x00000000214e9998>\n<environment: 0x000000001f9c9a90>\n\n$env\n<environment: 0x000000001f9c9a90>\n\n$report\nfunction (par = last.par) \n{\n    f(par, order = 0, type = \"double\")\n    as.list(reportenv)\n}\n<bytecode: 0x0000000020f183a0>\n<environment: 0x000000001f9c9a90>\n\n$simulate\nfunction (par = last.par, complete = FALSE) \n{\n    f(par, order = 0, type = \"double\", do_simulate = TRUE)\n    sim <- as.list(reportenv)\n    if (complete) {\n        ans <- data\n        ans[names(sim)] <- sim\n",
        "    }\n    else {\n        ans <- sim\n    }\n    ans\n}\n<bytecode: 0x0000000020d36e80>\n<environment: 0x000000001f9c9a90>\n\n",
        "> ",
        "obj <- MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\", silent = TRUE)",
        "> ",
        "  opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)",
        "> ",
        "opt",
        "$par\nlog_grav log_grav log_grav log_grav log_visc \n       0        0        0        0        0 \n\n$objective\n[1] Inf\n\n$convergence\n[1] 0\n\n$iterations\n[1] 1\n\n$evaluations\nfunction gradient \n       1        1 \n\n$message\n[1] \"both X-convergence and relative convergence (5)\"\n\n",
        "> ",
        "info$data",
        "$model\n[1] \"grav\"\n\n$fracs\n[1] 0.2 0.2 0.2 0.2 0.2\n\n$muprob\n[1] 0.9\n\n$nareas\n[1] 5\n\n",
        "> ",
        "info$params",
        "$log_grav\n[1] 0 0 0 0\n\n$log_visc\n[1] 0\n\n",
        "> ",
        "obj <- MakeADFun(data = info$data, parameters = info$params, DLL = \"MSEtool\", silent = FALSE)",
        "> ",
        "  opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr)",
        "outer mgc:  0 \n\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2
    ]
}